pipeline {
    agent any

    environment {
        ImageRegistry = "chamudim"
        COMPOSE_FILE = "Xpensify-client/docker-compose.yml"
    }

    stages {

        // stage('Verify Ansible') {
        //     steps {
        //         script{
        //             dir('ansible') {
        //                 bat 'wsl -d Ubuntu /usr/bin/ansible -i inventory.ini all -m ping'
        //             }
        //         }
        //     }
        // }

        stage('Terraform Setup') {
            steps {
                script {
                    dir('terraform') {
                        // First check AWS for existing running instances
                        def awsCheck = bat(
                            script: 'aws ec2 describe-instances --filters "Name=tag:Name,Values=DevOpsEC2" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].[InstanceId]" --output text',
                            returnStdout: true
                        ).trim()

                        if (awsCheck) {
                            echo "Found existing RUNNING instance with name 'DevOpsEC2' (ID: ${awsCheck})"
                            echo "Skipping Terraform operations"
                        } else {
                            echo "No running 'DevOpsEC2' instance found - initializing Terraform"
                            bat 'terraform init'
                            bat 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Deploy docker containers with Ansible') {
            steps {
                script{
                    dir('ansible') {
                        bat 'wsl -d Ubuntu /usr/bin/ansible-playbook -i inventory.ini docker-deploy.yml -vvv'
                    }
                }
            }
        }

    }

    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
    }
}
